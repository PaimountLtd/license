/**
 * @jest-environment jsdom
 */

import '@testing-library/jest-dom/extend-expect';
import React from 'react';
import { fireEvent, screen } from '@testing-library/react';
import {
  alertMock, renderApp, useModule, injectState, GetStateControllerFor,
} from '../helpers';
// import { GetStateControllerFor } from '../../lib';

class MyModule {

  state = injectState({
    counter: 0,
    items: [] as string[],
  });

  init() {
    this.state.onItemsChange((newValue, prevValue) => {
      alert(`newItems: ${newValue.join(', ')}; prevItems: ${prevValue.join(', ')}`);
    });
  }

  addItem() {
    this.state.mutate(state => {
      state.counter++;
      state.pushItems(`Item${state.counter}`);
    });
  }

}
function MyComponent() {
  const { addItem, items, removeItems } = useModule(MyModule);
  return (
    <div>
      <ul role="list">
        {items.map(item => <li key={item}>{item}</li>)}
      </ul>
      <button onClick={addItem}>Add item</button>
      <button onClick={() => removeItems(item => item === 'Item2')}>Remove Item2</button>
    </div>
  );
}

describe('Array autogenerated mutation', () => {

  it('Should autogenerate push and remove mutations', () => {
    const container = renderApp(<MyComponent />);
    const $addBtn = screen.getByText('Add item');
    const $removeBtn = screen.getByText('Remove Item2');
    const $list = screen.getByRole('list');

    fireEvent.click($addBtn);
    expect($list).toHaveTextContent('Item1');

    fireEvent.click($addBtn);
    expect($list).toHaveTextContent('Item1Item2');
    fireEvent.click($addBtn);

    fireEvent.click($removeBtn);
    expect($list).toHaveTextContent('Item1Item3');

  });

});
