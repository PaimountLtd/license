import { injectState } from '../../slapp/injectState';

// before
class EditorService extends PersistantStatefullService extends StatefullService extends Service {

  // define default state
  static defaultState: EditorState = {
    activeSceneId: '',
    activeItemId: '',
  };
}

class EditorService extends PersistantStatefullService<EditorState> {

  // define default state
  static defaultState: EditorState = {
      activeSceneId: '',
      activeItemId: '',
    };
  }

  @mutation()
  setActiveSceneId(sceneId) {
    this.state.activeSceneId = sceneId;
    this.state.activeItemId = '';
  }
}
// ^ too long chain of inheritance
// avoid to using inheritance chains longer then two entities

// describe persistent state config
class EditorState {

  // define default state
  state = {
    activeSceneId: '',
    activeItemId: '',
  };

  // mark state as persistent
  persistent = true;

  // select persistent keys
  // all keys are persistent by default
  persistentKeys = ['activeSceneId'];

  // automatically create mutations based on default state keys
  // true by default
  generateMutations = true;

}

class EditorService {

  state = injectState(EditorState);

  resetSelection() {
    // call autogenerated mutation
    this.state.setActiveItemId(1);
  }

}

// simplified object notation

class EditorService {

  state = injectState({
    activeSceneId: '',
    activeItemId: '',
  });

}

// simplified object notation of persistent state

class EditorService {

  state = injectState(
    {
      activeSceneId: '',
      activeItemId: '',
    },
    { persistant: true },
  );

  @mutation()
  resetSelection() {
    // call autogenerated mutation
    this.state.activeItemId = '1';
  }

}
