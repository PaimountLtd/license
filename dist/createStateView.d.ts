import { TPromisifyFunctions } from './store';
export declare function createViewWithActions<TStateType, TActions extends {
    state: TStateType;
}, TGetters extends Object>(actions: TActions, getters: TGetters): Omit<Omit<TActions["state"] extends (...args: any[]) => infer R1 ? R1 : TActions["state"], keyof (TPromisifyFunctions<TActions> extends (...args: any[]) => infer R2 ? R2 : TPromisifyFunctions<TActions>)> & (TPromisifyFunctions<TActions> extends (...args: any[]) => infer R2 ? R2 : TPromisifyFunctions<TActions>) extends (...args: any[]) => infer R1 ? R1 : Omit<TActions["state"] extends (...args: any[]) => infer R1 ? R1 : TActions["state"], keyof (TPromisifyFunctions<TActions> extends (...args: any[]) => infer R2 ? R2 : TPromisifyFunctions<TActions>)> & (TPromisifyFunctions<TActions> extends (...args: any[]) => infer R2 ? R2 : TPromisifyFunctions<TActions>), keyof (TGetters extends (...args: any[]) => infer R2 ? R2 : TGetters)> & (TGetters extends (...args: any[]) => infer R2 ? R2 : TGetters);
